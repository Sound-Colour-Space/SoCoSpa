
http://en.wikipedia.org/wiki/Graph_database

RDF:

http://en.wikipedia.org/wiki/Resource_Description_Framework

The RDF data model[2] is similar to classic conceptual modeling approaches such as entity–relationship or class diagrams, 
as it is based upon the idea of making statements about resources (in particular web resources) in the form of subject–predicate–object expressions. 
These expressions are known as triples in RDF terminology. 
The subject denotes the resource, and the predicate denotes traits or aspects of the resource and expresses a relationship between the subject and the object. 
For example, one way to represent the notion "The sky has the color blue" in RDF is as the triple: 
a subject denoting "the sky", a predicate denoting "has", and an object denoting "the color blue". 
Therefore RDF swaps object for subject that would be used in the classical notation of an entity–attribute–value model within object-oriented design; 
object (sky), attribute (color) and value (blue). 
RDF is an abstract model with several serialization formats (i.e., file formats), and so the particular way in which a resource or triple is encoded varies from format to format.[3]

This mechanism for describing resources is a major component in the W3C's Semantic Web activity: 
an evolutionary stage of the World Wide Web in which automated software can store, exchange, and use machine-readable information distributed throughout the Web, 
in turn enabling users to deal with the information with greater efficiency and certainty.[4] 
RDF's simple data model and ability to model disparate, abstract concepts has also led to its increasing use in knowledge management applications unrelated to Semantic Web activity.

A collection of RDF statements intrinsically represents a labeled, directed multi-graph. 
As such, an RDF-based data model is more naturally suited to certain kinds of knowledge representation than the relational model and other ontological models. 
However, in practice, RDF data is often persisted in relational database or native representations also called Triplestores, or Quad stores if context (i.e. the named graph) is also persisted for each RDF triple.[5] 
ShEX, or Shape Expressions,[6] is a language for expressing constraints on RDF graphs. 
It includes the cardinality constraints from OSLC Resource Shapes and Dublin Core Description Set Profiles as well as logical connectives for disjunction and polymorphism. 
As RDFS and OWL demonstrate, one can build additional ontology languages upon RDF.


===

http://whatis.techtarget.com/definition/graph-database

Definition

A graph database, also called a graph-oriented database, is a type of NoSQL database that uses graph theory to store, map and query relationships. // NoSQL = not only SQL

A graph database is essentially a collection of nodes and edges. 
Each node represents an entity (such as a person or business) and each edge represents a connection or relationship between two nodes. 
Every node in a graph database is defined by a unique identifier, a set of outgoing edges and/or incoming edges and a set of properties expressed as key/value pairs. 
Each edge is defined by a unique identifier, a starting-place and/or ending-place node and a set of properties.  
The mantra of graph database enthusiasts is "If you can whiteboard it, you can graph it."


Graph databases are well-suited for analyzing interconnections, which is why there has been a lot of interest in using graph databases to mine data from social media. 
Graph databases are also useful for working with data in business disciplines that involve complex relationships and dynamic schema, such as supply chain management, 
identifying the source of an IP telephony issue and creating "customers who bought this also looked at..." recommendations.

The concept behind graphing a database is often credited to 18th century mathematician Leonhard Euler.
See also:  social graph, graph search

This was last updated in  November 2014 

Posted by: Margaret Rouse 

Related Terms
Definitions
- column database management system (CDBMS) - There are different types of CDBMS offerings, with the common defining feature being that data is stored by column (or column families) instead of as rows. (SearchDataManagement.com)

- in-memory database management system (IMDBMS) - An in-memory database management system (IMDBMS) stores, manages and provides access to data from main memory. (SearchDataManagement.com)

- data warehouse - A data warehouse is a central repository for all or significant parts of the data that an enterprise's various business systems collect. (SearchSQLServer.com)

===


http://www.cbsolution.net/techniques/ontarget/databases_relational_vs_object_vs
[Last modified on 2011-05-28 by Administrator]

===

http://www.infoq.com/articles/graph-nosql-neo4j

===

HyperGraphDB is a general purpose, extensible, portable, distributed, embeddable, open-source data storage mechanism. 
It is a graph database designed specifically for artificial intelligence and semantic web projects, it can also be used as an embedded object-oriented database for projects of all sizes.

http://www.kobrix.com/hgdb.jsp

===

Graph Databases, NOSQL and Neo4j 

http://www.infoq.com/articles/graph-nosql-neo4j

Posted by  Peter Neubauer on May 12, 2010 

===

http://www.amazon.com/Graph-Databases-Ian-Robinson/dp/1449356265

O'Reilly book
Review:
Solid introduction to Graph Databases
 By  Devendra   on August 25, 2013
Format: Paperback 
This books lays a solid foundation for understanding what Graph Databases are all about. 
Implementation details are all based on Neo4J, except for a fleeting reference to Twitter's FlockDB when discussing scalability.

Chapters 1 and 2 provide overview of Graph Databases, and compare them to Relational and NoSQL Databases. 
Appendix A provides useful overview of different NoSQL databases.

Data modeling with Graph Databases is compared to relational databases in Chapter 3. 
The creation of a domain model is demonstrated using Systems Management Domain. 
Cross-domain modeling is also demonstrated. The models are created and queried using Cypher. 
Common modeling pitfalls are also discussed.

Chapter 4 discusses data modeling in more detail. Nodes are used to represent things, facts, and complex value types. 
Relationships are used to establish connections and semantics. Nodes and relationships have properties. 
Versioning of data is done inside the graph model, the downside being query complexity. 
Neo4J can be embedded into applications or deployed in server mode, benefits of each mode are discussed. 
Server mode allows for extensions written using JAX-RS, named indexes can be created using the REST API. 
High availability can be achieved using clustering and load balancing. Object caching provides the best querying performance. 
Redundancy and load requirements can be used to determine number of machines. 
Test-driven data model development can be done with ImpermanentGraphDatabase Java class, it also allows creation of named indexes.

Chapter 5 provides common real-world use cases and examples. Domains covered in detail include social network, authorization and access control, and logistics.

Chapter 6 discusses native graph processing and storage. Index-free adjacency provides better query performance. 
Programmatic access to Neo4J database is provided by the Kernel, Core and Traverser APIs. 
Non-functional characteristics such as transactions (ACID properties), recoverability, availability, scale (capacity, latency, and throughput) are also discussed.

Graph algorithms such as depth- and breath-first search, Dijkstra's algorithm, and A* algorithm are detailed, in chapter 7. 
Analyses based on these algorithms, and techniques from graph theory and social sciences, can be used to gain new insights from a domain. 
Social graph properties such as Triadic Closures, Structural Balance, and Local Bridges can be used to gain new insights into a social network.

I found the book extremely useful to understand what Graph Databases are all about. [Disclaimer] I thank O'Reilly Media for providing a review copy







